Возможности сервера

Сервер предоставляет следующие возможности для подключенных клиентов:
registration: Команда регистрации пользователя. Клиент вводит имя пользователя и пароль, которые сохраняются в файле users.txt.
authentication: Команда аутентификации пользователя. Клиент вводит имя пользователя и пароль, которые проверяются с информацией, хранящейся в файле users.txt. Аутентификация требуется для выполнения некоторых команд.
myinfo: Получение информации о клиенте, включая IP-адрес и порт. Для использования этой команды необходимо пройти аутентификацию.
server_info: Получение информации о сервере, включая имя хоста сервера.
ping: Проверка связи с сервером. Сервер отвечает "pong".
game: Игра "Угадай число". Клиент должен указать диапазон и попытаться угадать случайное число, сгенерированное сервером в этом диапазоне. Количество попыток ограничено.
exit: Завершение соединения с сервером.
session_history: Получение информации о предыдущих сессиях. Эта команда доступна только после успешной аутентификации.

Описание работы сервера

Сервер использует многопоточное подключение для работы с несколькими клиентами одновременно. Каждый клиентский запрос обрабатывается в отдельном потоке, что позволяет взаимодействовать с несколькими пользователями параллельно.
Функции сервера включают обработку команд клиента, регистрацию пользователя, игру, а также получение информации о сервере и клиенте.
При регистрации информация о пользователе (имя пользователя и пароль) сохраняется в файле users.txt. Эта информация используется для дальнейших проверок с целью аутентификации.
Аутентификация включает запрос имени пользователя и пароля, которые сравниваются с зашифрованными данными в файле users.txt. Пароли хранятся в виде хеша для повышения безопасности.
Для предотвращения атак "грубой силы" (brute force) сервер ограничивает количество попыток входа. Если количество неправильных попыток превышает заданный предел, пользователь временно блокируется.
После успешной аутентификации пользователю назначается сеансовый токен, который требуется для выполнения защищенных команд, таких как myinfo и session_history.

Структура файлов

server.c: Основной файл сервера, содержащий весь код для обработки клиентских подключений и команд.
client.c: Файл клиента, который позволяет подключаться к серверу и отправлять команды. Клиент может использовать команды, такие как registration, authentication, myinfo, server_info, ping, game, session_history и exit для взаимодействия с сервером.
users.txt: Файл, в котором хранятся данные зарегистрированных пользователей. Пароли хранятся в виде хеша для повышения безопасности.
sessions.txt: Файл, в котором хранится информация о предыдущих сессиях клиентов, включая успешные и неуспешные попытки входа.
ReadMe.txt: Файл, содержащий информацию о возможностях сервера и инструкцию по его использованию.

Использование

Компилируйте сервер с помощью команды: gcc server.c -o server -pthread -lcrypto
Компилируйте клиента с помощью команды: gcc client.c -o client
Запустите сервер: ./server
Клиенты могут подключаться к серверу с помощью клиента: ./client <IP-адрес сервера> <порт>
Также можно использовать telnet или любой другой TCP-клиент, указав IP-адрес сервера и порт (по умолчанию 9090).

Примечания

Пароли пользователей сохраняются в зашифрованном виде (хешируются) в файле users.txt для повышения безопасности.
Для предотвращения атак "грубой силы" сервер ограничивает количество попыток ввода неправильного пароля, после чего пользователь временно блокируется.
Команды myinfo и session_history требуют успешной аутентификации пользователя.